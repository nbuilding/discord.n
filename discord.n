import request
import json
import websocket
import times

let utils = imp "./utils.n"

let pub color = imp "./color.n"
let pub role = imp "./role.n"
let pub member = imp "./member.n"
let pub embed = imp "./embed.n"
let pub emote = imp "./emote.n"
let pub guild = imp "./guild.n"
let pub channel = imp "./channel.n"
let pub message = imp "./message.n"
let pub reaction = imp "./reaction.n"
let pub status = imp "./status.n"


// important variables
let mut key:str = ""

let mut header: maybe[json.value] = yes(json.object(mapFrom([
	("Content-Type", json.string("application/json")),
	("Authorization", json.string("Bot " + key))
])))

// custom types

type status = online
			| away
			| offline

alias pub responsesRecord = {
	onReady: maybe[member.Member -> cmd[()]],

	onGuildCreate: maybe[guild.Guild -> cmd[bool]],
	onGuildUpdate: maybe[guild.Guild -> cmd[bool]],
	onGuildDelete: maybe[guild.Guild -> cmd[bool]],
	onGuildRoleCreate: maybe[role.Role -> cmd[bool]],
	onGuildRoleUpdate: maybe[role.Role -> cmd[bool]],
	onGuildRoleDelete: maybe[role.Role -> cmd[bool]],
	onChannelCreate: maybe[channel.Channel -> cmd[bool]],
	onChannelUpdate: maybe[channel.Channel -> cmd[bool]],
	onChannelDelete: maybe[channel.Channel -> cmd[bool]],
	onChannelPinsCreate: maybe[channel.Channel -> cmd[bool]],

	onGuildMemberAdd: maybe[list[member.Member] -> cmd[bool]],
	onGuildMemberUpdate: maybe[list[member.Member] -> cmd[bool]],
	onGuildMemberRemove: maybe[list[member.Member] -> cmd[bool]],

	onGuildBanAdd: maybe[list[member.Member] -> cmd[bool]],
	onGuildBanRemove: maybe[list[member.Member] -> cmd[bool]],

	onGuildEmojisUpdate: maybe[list[emote.Emote] -> cmd[bool]],

	onMessage: maybe[message.Message -> cmd[bool]],
	onMessageUpdate: maybe[message.Message -> cmd[bool]],
	onMessageDelete: maybe[message.Message -> cmd[bool]],
	onMessageDeleteBulk: maybe[list[message.Message] -> cmd[bool]],

	onMessageReactionAdd: maybe[message.Message -> cmd[bool]],
	onMessageReactionRemove: maybe[message.Message -> cmd[bool]],
	onMessageReactionRemoveAll: maybe[message.Message -> cmd[bool]],

	onDirectMessage: maybe[message.Message -> cmd[bool]],
	onDirectMessageUpdate: maybe[message.Message -> cmd[bool]],
	onDirectMessageDelete: maybe[message.Message -> cmd[bool]],
	onDirectMessagePinsUpdate: maybe[channel.Channel -> cmd[bool]],

	onDirectMessageReactionAdd: maybe[message.Message -> cmd[bool]],
	onDirectMessageReactionRemove: maybe[message.Message -> cmd[bool]],
	onDirectMessageReactionRemoveAll: maybe[message.Message -> cmd[bool]],
}

// empty responses template
let pub responsesEmpty = {
	onReady: none,

	onGuildCreate: none,
	onGuildUpdate: none,
	onGuildDelete: none,
	onGuildRoleCreate: none,
	onGuildRoleUpdate: none,
	onGuildRoleDelete: none,
	onChannelCreate: none,
	onChannelUpdate: none,
	onChannelDelete: none,
	onChannelPinsCreate: none,

	onGuildMemberAdd: none,
	onGuildMemberUpdate: none,
	onGuildMemberRemove: none,

	onGuildBanAdd: none,
	onGuildBanRemove: none,

	onGuildEmojisUpdate: none,

	onMessage: none,
	onMessageUpdate: none,
	onMessageDelete: none,
	onMessageDeleteBulk: none,

	onMessageReactionAdd: none,
	onMessageReactionRemove: none,
	onMessageReactionRemoveAll: none,

	onDirectMessage: none,
	onDirectMessageUpdate: none,
	onDirectMessageDelete: none,
	onDirectMessagePinsUpdate: none,

	onDirectMessageReactionAdd: none,
	onDirectMessageReactionRemove: none,
	onDirectMessageReactionRemoveAll: none,
}

// public functions
let pub getKey = () -> str {
	return key
}

// Getting users
let pub getSelf = () -> cmd[maybe[member.Member]] {
	// Sends a request to the url
	let r = request.request("GET", "https://discord.com/api/users/@me", header, none)!
	if r.code ~= 200 {
		return none
	}

	if let object(map) = r.return {
		return utils.parseUserData(map)
							   |> yes()
	} else {
		return none
	}
}

let pub getUser = (id:str) -> cmd[maybe[member.Member]] {
	// Uses the id to get the url to send the request to
	let url:str = "https://discord.com/api/users/" + id
	let r = request.request("GET", url, header, none)!
	if r.code ~= 200 {
		return none
	}

	if let object(map) = r.return {
		return utils.parseUserData(map)
							   |> yes()
	} else {
		return none
	}
}

// Getting Messages
let pub getMessages = (c:str) -> cmd[maybe[list[message.Message]]] {
	let url:str = "https://discord.com/api/channels/" + c + "/messages"
	let r = request.request("GET", url, header, none)!

	if r.code ~= 200 {
		return none
	}

	if let array(list) = r.return {
		return list.filterMap(((thing: json.value) -> maybe[message.Message] {
				 	if let object(data) = thing {
					 	return data
					 			  |> utils.parseMessageData()
					 			  |> yes
		 			}
					else {
						return none
					}
				 }))
				 |> yes()
	} else {
		return none
	}
}

let pub getMessage = (c:str, m:str) -> cmd[maybe[message.Message]] {
	let url:str = "https://discord.com/api/channels/" + c + "/messages/" + m
	let r = request.request("GET", url, header, none)!

	if r.code ~= 200 {
		return none
	}

	if let object(data) = r.return {
		return yes(utils.parseMessageData(data))
	}

	return none
}


// Sending messages/reactions
let pub sendMessage = (
	channel:str,
	content:maybe[str],
	tts:maybe[bool],
	embeds:maybe[list[embed.Embed]],
	allowedMentions:maybe[{
		parse:maybe[list[str]],
		users:maybe[list[int]],
		roles:maybe[list[int]],
		repliedUser:maybe[bool]
	}],
	messageReply:maybe[int],
	// File name, Files data in string form
	files: maybe[list[(str, str, list[int])]]
) -> cmd[int] {
	let url:str = "https://discord.com/api/channels/" + channel + "/messages"

	let mut jsonContent:list[(str, json.value)] = []

	if let yes(cont) = content {
		jsonContent = jsonContent.append(("content", json.string(cont)))
	}
	if let yes(t) = tts {
		jsonContent = jsonContent.append(("tts", json.boolean(t)))
	}
	if let yes(e) = embeds {
		jsonContent = jsonContent.append(("embeds", json.array(
			e.filterMap((v: embed.Embed) -> maybe[json.value] {
				return yes(v.asJson())
			})
		)))
	}
	if let yes(am) = allowedMentions {
		let mut amContent:list[(str, json.value)] = []
		if let yes(p) = am.parse {
			amContent = amContent.append(("parse", json.array(
				p.filterMap((v: str) -> maybe[json.value] {
					return yes(json.string(v))
				})
			)))
		}
		if let yes(u) = am.users {
			amContent = amContent.append(("users", json.array(
				u.filterMap((v: int) -> maybe[json.value] {
					return yes(json.number(v.toFloat()))
				})
			)))
		}
		if let yes(r) = am.roles {
			amContent = amContent.append(("roles", json.array(
				r.filterMap((v: int) -> maybe[json.value] {
					return yes(json.number(v.toFloat()))
				})
			)))
		}
		if let yes(ru) = am.repliedUser {
			amContent = amContent.append(("replied_user", json.boolean(ru)))
		}
		jsonContent = jsonContent.append(("allowed_mentions", json.object(
			mapFrom(amContent)
		)))
	}
	if let yes(mr) = messageReply {
		jsonContent = jsonContent.append(("message_reference", json.number(mr.toFloat())))
	}
	
	if let yes(fs) = files {
		// Upload files
		let mut filesContent: list[{id: int, description: str, filename: str, bytes: list[int]}] = []

		for (i in range(0, fs.len(), 1)) {
			if let yes(fd) = fs[i] {
				let (name, des, f) = fd
				filesContent = filesContent.append({
					id: i,
					description: des,
					filename: name,
					bytes: f,
				})
			}
		}

		jsonContent = jsonContent.append(("attachments", json.array(filesContent.filterMap((v: {id: int, description: str, filename: str, bytes: list[int]}) -> maybe[json.value] {
			return yes(json.object(mapFrom([
				("id", json.number(v.id.toFloat())),
				("description", json.string(v.description)),
				("filename", json.string(v.filename)),
			])))
		}))))

		let r = request.sendMultipartForm("POST", url, yes(json.object(mapFrom([
			("Authorization", json.string("Bot " + key))
		]))), [{
			name: "playload_json",
			data: (false, utils.toBytes("{\"attachments\": [{ \"id\": 0, \"description\": \"This took me way too long\", \"filename\": \"help.png\" }]}")),
			filename: none,
			contentType: none,
		},
		..filesContent.filterMap((v: {id: int, description: str, filename: str, bytes: list[int]}) -> maybe[{name: str, data: (bool, list[int]), filename: maybe[str], contentType: maybe[str]}] {
			return yes({
				name: "files[" + v.id.toString() + "]",
				data: (true, v.bytes),
				filename: yes(v.filename),
				contentType: none
			})
		})])!

		return r.code
	}
	let r = request.request("POST", url, header, yes(json.object(mapFrom(jsonContent))))!
	
	return r.code
}

let pub sendMessageTest = (img: list[int]) -> cmd[int] {
	let url:str = "https://discord.com/api/channels/660903404977127426/messages"

	let r = request.sendMultipartForm("POST", url, yes(json.object(mapFrom([
		("Authorization", json.string("Bot " + key))
	]))), [{
		name: "playload_json",
		data: (false, utils.toBytes("{\"attachments\": [{ \"id\": 0, \"description\": \"This took me way too long\", \"filename\": \"help.png\" }]}")),
		filename: none,
		contentType: none,
	},
	{
		name: "files[0]",
		data: (true, img),
		filename: yes("help.png"),
		contentType: none
	}])!

	// print(r)
	
	return r.code
}

let pub start = (k:str, presence:status.Status, responses:responsesRecord) -> cmd[bool] {
	key = k
	header = yes(json.object(mapFrom([
		("Content-Type", json.string("application/json")),
		("Authorization", json.string("Bot " + key))
	])))
	let r = request.request("GET","https://discord.com/api/gateway/bot", header, none)!
	
	if r.code ~= 200 {
		return false
	}

	if let object(map) = r.return {
		if let string(url) = map["url"] | json.array([json.string("")]) {
			// https://discord.com/developers/docs/topics/gateway#identifying
			let identification = json.object(mapFrom([
									("op", json.number(2.0)),
									("d", json.object(mapFrom([
										("token", json.string(key)),
										("intents", json.number(512.0)),
										("properties", json.object(mapFrom([
											("$os", json.string("windows")),
											("$browser", json.string("none")),
											("$device", json.string("none"))
										]))),
										("presence", utils.parseStatus(presence))
									])))
								]))
			let mut heartbeatInterval = 1000.0
			let lastSequenceNumber:maybe[float] = none
			let mut stopNow = false
			let websocket = websocket.connect({
				onOpen: (send: websocket.send) -> cmd[bool] {
					let senddata = send(json.stringify(identification))!
					times.sleep(1000)!
					send(json.stringify(json.object(mapFrom([
						("op", json.number(1.0)),
						("d", if let yes(lsn) = lastSequenceNumber { json.number(lsn) } else { json.null })
					]))))!
					while (true) {
						times.sleep(heartbeatInterval.floor())!
						send(json.stringify(json.object(mapFrom([
							("op", json.number(1.0)),
							("d", if let yes(lsn) = lastSequenceNumber { json.number(lsn) } else { json.null })
						]))))!
					}
					return true
				},
				onMessage: (send: websocket.send, message: str) -> cmd[bool] {
					let mut stop = false
					if let yes(parsedMessage) = json.parseSafe(message) {
						if let object(messageData) = parsedMessage {
							if let yes(number(opCode)) = messageData["op"] {
								if opCode == 10.0 {
									if let yes(object(dataSent)) = messageData["d"] {
										if let yes(number(heartbeatTiming)) = dataSent["heartbeat_interval"] {
											heartbeatInterval = heartbeatTiming
										}
									}
								} // 10 is hello
								else if opCode == 0.0 {
									if let yes(string(messageType)) = messageData["t"] {
										if messageType == "READY" {
											if let yes(object(data)) = messageData["d"] {
												if let yes(object(userData)) = data["user"] {
													if let yes(runFunc) = responses.onReady {
														runFunc(utils.parseUserData(userData))!
													}
												}
											}
										}
										if messageType == "MESSAGE_CREATE" {
											if let yes(object(data)) = messageData["d"] {
												if let yes(runFunc) = responses.onMessage {
														stop = runFunc(utils.parseMessageData(data))!
													}
											}
										}
									}
								} // 0 is dispatch
								else if opCode == 11.0 {} // 11 is heatbeat acknowledgement
								else if opCode == 7.0 {
									send(json.stringify(json.object(mapFrom([
										("op", json.number(7.0)),
										("d", json.null),
									]))))!
								} // 7 is reconnect requests
								else {
									print(parsedMessage)
								}
							}
						}
					}
					stopNow = if (stop) { true } else { stopNow }
					return stop
				},
			}, url + "/?v=9&encoding=json")!

			print(websocket)

			return true
		} else {
			return false
		}
	}
	
	return false
}
