import request
import json
import websocket
import times

let pub color = imp "./color.n"
let pub role = imp "./role.n"
let pub member = imp "./member.n"
let pub emote = imp "./emote.n"
let pub guild = imp "./guild.n"
let pub channel = imp "./channel.n"
let pub message = imp "./message.n"
let pub reaction = imp "./reaction.n"
let pub status = imp "./status.n"


// important variables
let key:str = ""

let header: map[str, str] = mapFrom([
	("Content-Type", "application/json"),
	("Authorization", "Bot " + key)
])

// custom types

type status = online
			| away
			| offline

alias pub responsesRecord = {
	onReady: maybe[member.Member -> cmd[()]]

	onGuildCreate: maybe[guild.Guild -> cmd[bool]]
	onGuildUpdate: maybe[guild.Guild -> cmd[bool]]
	onGuildDelete: maybe[guild.Guild -> cmd[bool]]
	onGuildRoleCreate: maybe[role.Role -> cmd[bool]]
	onGuildRoleUpdate: maybe[role.Role -> cmd[bool]]
	onGuildRoleDelete: maybe[role.Role -> cmd[bool]]
	onChannelCreate: maybe[channel.Channel -> cmd[bool]]
	onChannelUpdate: maybe[channel.Channel -> cmd[bool]]
	onChannelDelete: maybe[channel.Channel -> cmd[bool]]
	onChannelPinsCreate: maybe[channel.Channel -> cmd[bool]]

	onGuildMemberAdd: maybe[list[member.Member] -> cmd[bool]]
	onGuildMemberUpdate: maybe[list[member.Member] -> cmd[bool]]
	onGuildMemberRemove: maybe[list[member.Member] -> cmd[bool]]

	onGuildBanAdd: maybe[list[member.Member] -> cmd[bool]]
	onGuildBanRemove: maybe[list[member.Member] -> cmd[bool]]

	onGuildEmojisUpdate: maybe[list[emote.Emote] -> cmd[bool]]

	onMessage: maybe[message.Message -> cmd[bool]]
	onMessageUpdate: maybe[message.Message -> cmd[bool]]
	onMessageDelete: maybe[message.Message -> cmd[bool]]
	onMessageDeleteBulk: maybe[list[message.Message] -> cmd[bool]]

	onMessageReactionAdd: maybe[message.Message -> cmd[bool]]
	onMessageReactionRemove: maybe[message.Message -> cmd[bool]]
	onMessageReactionRemoveAll: maybe[message.Message -> cmd[bool]]

	onDirectMessage: maybe[message.Message -> cmd[bool]]
	onDirectMessageUpdate: maybe[message.Message -> cmd[bool]]
	onDirectMessageDelete: maybe[message.Message -> cmd[bool]]
	onDirectMessagePinsUpdate: maybe[channel.Channel -> cmd[bool]]

	onDirectMessageReactionAdd: maybe[message.Message -> cmd[bool]]
	onDirectMessageReactionRemove: maybe[message.Message -> cmd[bool]]
	onDirectMessageReactionRemoveAll: maybe[message.Message -> cmd[bool]]
}

// empty responses template
let pub responsesEmpty = {
	onReady: none

	onGuildCreate: none
	onGuildUpdate: none
	onGuildDelete: none
	onGuildRoleCreate: none
	onGuildRoleUpdate: none
	onGuildRoleDelete: none
	onChannelCreate: none
	onChannelUpdate: none
	onChannelDelete: none
	onChannelPinsCreate: none

	onGuildMemberAdd: none
	onGuildMemberUpdate: none
	onGuildMemberRemove: none

	onGuildBanAdd: none
	onGuildBanRemove: none

	onGuildEmojisUpdate: none

	onMessage: none
	onMessageUpdate: none
	onMessageDelete: none
	onMessageDeleteBulk: none

	onMessageReactionAdd: none
	onMessageReactionRemove: none
	onMessageReactionRemoveAll: none

	onDirectMessage: none
	onDirectMessageUpdate: none
	onDirectMessageDelete: none
	onDirectMessagePinsUpdate: none

	onDirectMessageReactionAdd: none
	onDirectMessageReactionRemove: none
	onDirectMessageReactionRemoveAll: none
}

// internal functions
let jsonToStrMap = [jsonVal: json.value] -> maybe[map[str, str]] {
	if let <object map> = jsonVal {
		return entries(map)
			|> filterMap(([(key, value): (str, json.value)] -> maybe[(str, str)] {
				if let <string str> = value {
					return yes((key, str))
				} else {
					return none
				}
			}))
			|> mapFrom()
			|> yes()
	} else {
		return none
	}
}

let parseUserData = [data:map[str, json.value]] -> member.Member{
	return member.Member(
		if let <yes <string id>> = data |> getValue("id") {
			id
		} else {
			""
		},
		if let <yes <string username>> = data |> getValue("username") {
			username
		} else {
			""
		},
		if let <yes <string avatar>> = data |> getValue("avatar") {
			avatar
		} else {
			""
		},
		if let <yes <string bot>> = data |> getValue("bot") {
			bot == "True"
		} else {
			false
		}
	)
}

let parseMessageData = [data:map[str, json.value]] -> message.Message {

	return message.Message(
		if let <yes <string ch>> = getValue("channel_id", data) {ch} else {""},
		if let <yes <string str>> = getValue("id", data) {
			str
		} else {
			""
		},
		if let <yes <string str>> = getValue("content", data) {
			str
		} else {
			""
		},
		if let <yes <object userData>> = getValue("author", data) {
			parseUserData(userData)
		} else {
			member.Member("", "", "", false)
		}
	)
}

let parseStatus = [input:status.Status] -> json.value {
	if let <yes since> = input.getSince() {
		return json.object(mapFrom([
			("since", json.number(since^1)),
			("activities", json.array([json.object(mapFrom([
				("name", json.string(input.getActivity().name)),
				("type", json.number(input.getActivity().type^1)),
			]))])),
			("status", json.string(input.getStatus())),
			("since", json.boolean(input.isAfk())),
		]))
	}

	return json.object(mapFrom([
		("activities", json.array([json.object(mapFrom([
			("name", json.string(input.getActivity().name)),
			("type", json.number(input.getActivity().type^1)),
		]))])),
		("status", json.string(input.getStatus())),
		("since", json.boolean(input.isAfk())),
	]))
}

// public functions
let pub getKey = [] -> str {
	return key
}

// Getting users
let pub getSelf = [] -> cmd[maybe[member.Member]] {
	// Sends a request to the url
	let r = request.get("https://discord.com/api/users/@me", header)!
	if r.code /= 200{
		return none
	}

	if let <object map> = r.return {
		return parseUserData(map)
							   |> yes()
	} else {
		return none
	}
}

let pub getUser = [id:str] -> cmd[maybe[member.Member]] {
	// Uses the id to get the url to send the request to
	let url:str = "https://discord.com/api/users/" + id
	let r = request.get(url, header)!
	if r.code /= 200{
		return none
	}

	if let <object map> = r.return {
		return parseUserData(map)
							   |> yes()
	} else {
		return none
	}
}

// Getting Messages
let pub getMessages = [c:str] -> cmd[maybe[list[message.Message]]] {
	let url:str = "https://discord.com/api/channels/" + c + "/messages"
	let r = request.get(url, header)!

	if r.code /= 200{
		return none
	}

	if let <array list> = r.return{
		return list
				 |> filterMap(([thing: json.value] -> maybe[message.Message] {
				 	if let <object data> = thing {
					 	return data
					 			  |> parseMessageData()
					 			  |> yes
		 			}
					else {
						return none
					}
				 }))
				 |> yes()
	} else {
		return none
	}
}

let pub getMessage = [c:str m:str] -> cmd[maybe[message.Message]] {
	let url:str = "https://discord.com/api/channels/" + c + "/messages/" + m
	let r = request.get(url, header)!

	if r.code /= 200{
		return none
	}

	if let <object data> = r.return {
		return yes(parseMessageData(data))
	}

	return none
}


// Sending messages/reactions
let pub sendMessage = [c:str m:str] -> cmd[int] {
	let url:str = "https://discord.com/api/channels/" + c + "/messages"
	let r = request.post(url, mapFrom([("content", m)]), header)!
	return r.code
}

let pub start = [k:str presence:status.Status responses:responsesRecord] -> cmd[bool] {
	var key = k
	var header = mapFrom([
		("Content-Type", "application/json"),
		("Authorization", "Bot " + key)
	])
	let r = request.get("https://discord.com/api/gateway/bot", header)!
	if r.code /= 200{
		return false
	}

	if let <object map> = r.return {
		if let <string url> = default(json.array([json.string("")]), getValue("url", map)) {
			// https://discord.com/developers/docs/topics/gateway#identifying
			let identification = json.object(mapFrom([
									("op", json.number(2.0)),
									("d", json.object(mapFrom([
										("token", json.string(key)),
										("intents", json.number(512.0)),
										("properties", json.object(mapFrom([
											("$os", json.string("windows")),
											("$browser", json.string("none")),
											("$device", json.string("none"))
										]))),
										("presence", parseStatus(presence))
									])))
								]))
			let heartbeatInterval = 1000.0
			let lastSequenceNumber:maybe[float] = none
			let stopWhile = false
			let websocket = websocket.connect({
				onOpen: [send: websocket.send] -> cmd[bool] {
					let senddata = send(json.stringify(identification))!
					let _ = times.sleep(1000)!
					let _ = send(json.stringify(json.object(mapFrom([
						("op", json.number(1.0)),
						("d", if let <yes lsn> = lastSequenceNumber { json.number(lsn) } else { json.null })
					]))))!
					while (true) {
						let _ = times.sleep(floor(heartbeatInterval))!
						let _ = send(json.stringify(json.object(mapFrom([
							("op", json.number(1.0)),
							("d", if let <yes lsn> = lastSequenceNumber { json.number(lsn) } else { json.null })
						]))))!
						if (stopWhile) {
							return true
						}
					}
					return true
				}
				onMessage: [send: websocket.send message: str] -> cmd[bool] {
					let stop = false
					if let <yes parsedMessage> = json.parseSafe(message) {
						if let <object messageData> = parsedMessage {
							if let <yes <number opCode>> = getValue("op", messageData) {
								if opCode == 10.0 {
									if let <yes <object dataSent>> = getValue("d", messageData) {
										if let <yes <number heartbeatTiming>> = getValue("heartbeat_interval", dataSent) {
											var heartbeatInterval = heartbeatTiming
										}
									}
								} // 10 is hello
								else if opCode == 0.0 {
									if let <yes <string messageType>> = getValue("t", messageData) {
										if messageType == "READY" {
											if let <yes <object data>> = getValue("d", messageData) {
												if let <yes <object userData>> = getValue("user", data) {
													if let <yes runFunc> = responses.onReady {
														let _ = runFunc(parseUserData(userData))!
													}
												}
											}
										}
										if messageType == "MESSAGE_CREATE" {
											if let <yes <object data>> = getValue("d", messageData) {
												if let <yes runFunc> = responses.onMessage {
														let _ = runFunc(parseMessageData(data))!
													}
											}
										}
									}
								} // 0 is dispatch
								else if opCode == 11.0 {}
								else {
									print(parsedMessage)
								}
							}
						}
					}
					var stopWhile = stop
					return stop
				}
			}, url + "/?v=9&encoding=json")!

			return true
		} else {
			return false
		}
	}
	
	return false
}
