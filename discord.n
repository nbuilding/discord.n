import request
import json
import websocket

let pub color = imp color
let pub role = imp role
let pub member = imp member
let pub emote = imp emote
let pub guild = imp guild
let pub channel = imp channel
let pub message = imp message
let pub reaction = imp reaction

// important variables
let key:str = ""

let header: map[str, str] = mapFrom([
	("Content-Type", "application/json"),
	("Authorization", "Bot " + key)
])

// custom types

type status = online
			| away
			| offline

alias responsesRecord = {
	//onReady: cmd[()]
	onMessage: message.Message -> cmd[bool]
}

// internal functions
let jsonToStrMap = [jsonVal: json.value] -> maybe[map[str, str]] {
	if let <object map> = jsonVal {
		return entries(map)
			|> filterMap(([(key, value): (str, json.value)] -> maybe[(str, str)] {
				if let <string str> = value {
					return yes((key, str))
				} else {
					return none
				}
			}))
			|> mapFrom()
			|> yes()
	} else {
		return none
	}
}

let parseUserData = [data:map[str, json.value]] -> member.Member{
	return member.Member(
		if let <yes <string id>> = data |> getValue("id") {
			id
		} else {
			""
		},
		if let <yes <string username>> = data |> getValue("username") {
			username
		} else {
			""
		},
		if let <yes <string avatar>> = data |> getValue("avatar") {
			avatar
		} else {
			""
		},
		if let <yes <string bot>> = data |> getValue("bot") {
			bot == "True"
		} else {
			false
		}
	)
}

let parseMessageData = [data:map[str, json.value]] -> message.Message {

	return message.Message(
		if let <yes <string ch>> = getValue("channel_id", data) {ch} else {""},
		if let <yes <string str>> = getValue("id", data) {
			str
		} else {
			""
		},
		if let <yes <string str>> = getValue("content", data) {
			str
		} else {
			""
		},
		if let <yes <object userData>> = getValue("author", data) {
			parseUserData(userData)
		} else {
			member.Member("", "", "", false)
		}
	)
}

let removeJSONArtifacts = [input:str] -> str {
	let out = ""
	let skip = false
	for (i in range(0, len(input) - 1, 1)) {
		if substring(i, i + 2, input) == ".0" {
			var skip = true
		} else if skip {
			var skip = false
		} else {
			var out = out + (charAt(i, input) |> default(\{ }))
		}
		
	}
	if ~skip {
		var out = out + (charAt(len(input) - 1, input) |> default(\{ }))
	} 

	return out
}

// public functions

let pub getKey = [] -> str{
	return key
}

// Getting users
let pub getSelf = [] -> cmd[maybe[member.Member]] {
	// Sends a request to the url
	let r = request.get("https://discord.com/api/users/@me", header)!
	if r.code /= 200{
		return none
	}

	if let <object map> = r.return {
		return parseUserData(map)
							   |> yes()
	} else {
		return none
	}
}

let pub getUser = [id:str] -> cmd[maybe[member.Member]] {
	// Uses the id to get the url to send the request to
	let url:str = "https://discord.com/api/users/" + id
	let r = request.get(url, header)!
	if r.code /= 200{
		return none
	}

	if let <object map> = r.return {
		return parseUserData(map)
							   |> yes()
	} else {
		return none
	}
}

// Getting Messages
let pub getMessages = [c:str] -> cmd[maybe[list[message.Message]]] {
	let url:str = "https://discord.com/api/channels/" + c + "/messages"
	let r = request.get(url, header)!

	if r.code /= 200{
		return none
	}

	if let <array list> = r.return{
		return list
				 |> filterMap(([thing: json.value] -> maybe[message.Message] {
				 	if let <object data> = thing {
					 	return data
					 			  |> parseMessageData()
					 			  |> yes
		 			}
					else {
						return none
					}
				 }))
				 |> yes()
	} else {
		return none
	}
}

let pub getMessage = [c:str m:str] -> cmd[maybe[message.Message]] {
	let url:str = "https://discord.com/api/channels/" + c + "/messages/" + m
	let r = request.get(url, header)!

	if r.code /= 200{
		return none
	}

	if let <object data> = r.return {
		return yes(parseMessageData(data))
	}

	return none
}


// Sending messages/reactions
let pub sendMessage = [c:str m:str] -> cmd[int] {
	let url:str = "https://discord.com/api/channels/" + c + "/messages"
	let r = request.post(url, mapFrom([("content", m)]), header)!
	print(r)
	return r.code
}

let pub start = [k:str responses:responsesRecord] -> cmd[bool] {
	var key = k
	var header = mapFrom([
		("Content-Type", "application/json"),
		("Authorization", "Bot " + key)
	])
	let r = request.get("https://discord.com/api/gateway/bot", header)!
	if r.code /= 200{
		return false
	}

	if let <object map> = r.return {
		if let <string url> = default(json.array([json.string("")]), getValue("url", map)) {
			// https://discord.com/developers/docs/topics/gateway#identifying
			let identification = json.object(mapFrom([
									("op", json.number(2.0)),
									("d", json.object(mapFrom([
										("token", json.string(key)),
										("intents", json.number(512.0)),
										("properties", json.object(mapFrom([
											("$os", json.string("windows")),
											("$browser", json.string("none")),
											("$device", json.string("none"))
										]))),
									])))
								]))
			let websocket = websocket.connect({
				onOpen: [send: websocket.send] -> cmd[bool] {
					let senddata = send(json.stringify(identification) |> removeJSONArtifacts)!
					return false
				}
				onMessage: [send: websocket.send message: str] -> cmd[bool] {
					let stop = false
					if let <yes parsedMessage> = json.parseSafe(message) {
						if let <object messageData> = parsedMessage {
							if let <yes <number opCode>> = getValue("op", messageData) {
								if opCode == 0.0 {
									if let <yes <string messageType>> = getValue("t", messageData) {
										if messageType == "READY" {
											//let _ = responses.onReady!
										}
										if messageType == "MESSAGE_CREATE" {
											if let <yes <object data>> = getValue("d", messageData) {
												var stop = responses.onMessage(parseMessageData(data))!
											}
										}
									}
								} // 0 is dispatch
							}
						}
					}
					return stop
				}
			}, url + "/?v=8&encoding=json")!
			return true
		} else {
			return false
		}
	} else {
		return false
	}

	return true
}
