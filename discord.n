import request
import json
import websocket
import times

let pub color = imp "./color.n"
let pub role = imp "./role.n"
let pub member = imp "./member.n"
let pub emote = imp "./emote.n"
let pub guild = imp "./guild.n"
let pub channel = imp "./channel.n"
let pub message = imp "./message.n"
let pub reaction = imp "./reaction.n"
let pub status = imp "./status.n"


// important variables
let mut key:str = ""

let mut header: maybe[json.value] = yes(json.object(mapFrom([
	("Content-Type", json.string("application/json")),
	("Authorization", json.string("Bot " + key))
])))

// custom types

type status = online
			| away
			| offline

alias pub responsesRecord = {
	onReady: maybe[member.Member -> cmd[()]],

	onGuildCreate: maybe[guild.Guild -> cmd[bool]],
	onGuildUpdate: maybe[guild.Guild -> cmd[bool]],
	onGuildDelete: maybe[guild.Guild -> cmd[bool]],
	onGuildRoleCreate: maybe[role.Role -> cmd[bool]],
	onGuildRoleUpdate: maybe[role.Role -> cmd[bool]],
	onGuildRoleDelete: maybe[role.Role -> cmd[bool]],
	onChannelCreate: maybe[channel.Channel -> cmd[bool]],
	onChannelUpdate: maybe[channel.Channel -> cmd[bool]],
	onChannelDelete: maybe[channel.Channel -> cmd[bool]],
	onChannelPinsCreate: maybe[channel.Channel -> cmd[bool]],

	onGuildMemberAdd: maybe[list[member.Member] -> cmd[bool]],
	onGuildMemberUpdate: maybe[list[member.Member] -> cmd[bool]],
	onGuildMemberRemove: maybe[list[member.Member] -> cmd[bool]],

	onGuildBanAdd: maybe[list[member.Member] -> cmd[bool]],
	onGuildBanRemove: maybe[list[member.Member] -> cmd[bool]],

	onGuildEmojisUpdate: maybe[list[emote.Emote] -> cmd[bool]],

	onMessage: maybe[message.Message -> cmd[bool]],
	onMessageUpdate: maybe[message.Message -> cmd[bool]],
	onMessageDelete: maybe[message.Message -> cmd[bool]],
	onMessageDeleteBulk: maybe[list[message.Message] -> cmd[bool]],

	onMessageReactionAdd: maybe[message.Message -> cmd[bool]],
	onMessageReactionRemove: maybe[message.Message -> cmd[bool]],
	onMessageReactionRemoveAll: maybe[message.Message -> cmd[bool]],

	onDirectMessage: maybe[message.Message -> cmd[bool]],
	onDirectMessageUpdate: maybe[message.Message -> cmd[bool]],
	onDirectMessageDelete: maybe[message.Message -> cmd[bool]],
	onDirectMessagePinsUpdate: maybe[channel.Channel -> cmd[bool]],

	onDirectMessageReactionAdd: maybe[message.Message -> cmd[bool]],
	onDirectMessageReactionRemove: maybe[message.Message -> cmd[bool]],
	onDirectMessageReactionRemoveAll: maybe[message.Message -> cmd[bool]],
}

// empty responses template
let pub responsesEmpty = {
	onReady: none,

	onGuildCreate: none,
	onGuildUpdate: none,
	onGuildDelete: none,
	onGuildRoleCreate: none,
	onGuildRoleUpdate: none,
	onGuildRoleDelete: none,
	onChannelCreate: none,
	onChannelUpdate: none,
	onChannelDelete: none,
	onChannelPinsCreate: none,

	onGuildMemberAdd: none,
	onGuildMemberUpdate: none,
	onGuildMemberRemove: none,

	onGuildBanAdd: none,
	onGuildBanRemove: none,

	onGuildEmojisUpdate: none,

	onMessage: none,
	onMessageUpdate: none,
	onMessageDelete: none,
	onMessageDeleteBulk: none,

	onMessageReactionAdd: none,
	onMessageReactionRemove: none,
	onMessageReactionRemoveAll: none,

	onDirectMessage: none,
	onDirectMessageUpdate: none,
	onDirectMessageDelete: none,
	onDirectMessagePinsUpdate: none,

	onDirectMessageReactionAdd: none,
	onDirectMessageReactionRemove: none,
	onDirectMessageReactionRemoveAll: none,
}

// internal functions
let jsonToStrMap = (jsonVal: json.value) -> maybe[map[str, str]] {
	if let object(map) = jsonVal {
		return entries(map).filterMap((((key, value): (str, json.value)) -> maybe[(str, str)] {
				if let string(str) = value {
					return yes((key, str))
				} else {
					return none
				}
			}))
			|> mapFrom()
			|> yes()
	} else {
		return none
	}
}

let parseUserData = (data:map[str, json.value]) -> member.Member {
	return member.Member(
		if let yes(string(id)) = data["id"] {
			id
		} else {
			""
		},
		if let yes(string(username)) = data["username"] {
			username
		} else {
			""
		},
		if let yes(string(avatar)) = data["avatar"] {
			avatar
		} else {
			""
		},
		if let yes(string(bot)) = data["bot"] {
			bot == "True"
		} else {
			false
		}
	)
}

let parseMessageData = (data:map[str, json.value]) -> message.Message {

	return message.Message(
		if let yes(string(ch)) = data["channel_id"] {ch} else {""},
		if let yes(string(str)) = data["id"] {
			str
		} else {
			""
		},
		if let yes(string(str)) = data["content"] {
			str
		} else {
			""
		},
		if let yes(object(userData)) = data["author"] {
			parseUserData(userData)
		} else {
			member.Member("", "", "", false)
		}
	)
}

let parseStatus = (input:status.Status) -> json.value {
	if let yes(since) = input.getSince() {
		return json.object(mapFrom([
			("since", json.number(since.toFloat())),
			("activities", json.array([json.object(mapFrom([
				("name", json.string(input.getActivity().name)),
				("type", json.number(input.getActivity().type.toFloat())),
			]))])),
			("status", json.string(input.getStatus())),
			("since", json.boolean(input.isAfk())),
		]))
	}

	return json.object(mapFrom([
		("activities", json.array([json.object(mapFrom([
			("name", json.string(input.getActivity().name)),
			("type", json.number(input.getActivity().type.toFloat())),
		]))])),
		("status", json.string(input.getStatus())),
		("since", json.boolean(input.isAfk())),
	]))
}

// public functions
let pub getKey = () -> str {
	return key
}

// Getting users
let pub getSelf = () -> cmd[maybe[member.Member]] {
	// Sends a request to the url
	let r = request.request("GET", "https://discord.com/api/users/@me", header, none)!
	if r.code ~= 200{
		return none
	}

	if let object(map) = r.return {
		return parseUserData(map)
							   |> yes()
	} else {
		return none
	}
}

let pub getUser = (id:str) -> cmd[maybe[member.Member]] {
	// Uses the id to get the url to send the request to
	let url:str = "https://discord.com/api/users/" + id
	let r = request.request("GET", url, header, none)!
	if r.code ~= 200{
		return none
	}

	if let object(map) = r.return {
		return parseUserData(map)
							   |> yes()
	} else {
		return none
	}
}

// Getting Messages
let pub getMessages = (c:str) -> cmd[maybe[list[message.Message]]] {
	let url:str = "https://discord.com/api/channels/" + c + "/messages"
	let r = request.request("GET", url, header, none)!

	if r.code ~= 200{
		return none
	}

	if let array(list) = r.return {
		return list.filterMap(((thing: json.value) -> maybe[message.Message] {
				 	if let object(data) = thing {
					 	return data
					 			  |> parseMessageData()
					 			  |> yes
		 			}
					else {
						return none
					}
				 }))
				 |> yes()
	} else {
		return none
	}
}

let pub getMessage = (c:str, m:str) -> cmd[maybe[message.Message]] {
	let url:str = "https://discord.com/api/channels/" + c + "/messages/" + m
	let r = request.request("GET", url, header, none)!

	if r.code ~= 200{
		return none
	}

	if let object(data) = r.return {
		return yes(parseMessageData(data))
	}

	return none
}


// Sending messages/reactions
let pub sendMessage = (c:str, m:str) -> cmd[int] {
	let url:str = "https://discord.com/api/channels/" + c + "/messages"
	let r = request.request("POST", url, header, yes(json.object(mapFrom([("content", json.string(m))]))))!
	
	return r.code
}

let pub start = (k:str, presence:status.Status, responses:responsesRecord) -> cmd[bool] {
	key = k
	header = yes(json.object(mapFrom([
		("Content-Type", json.string("application/json")),
		("Authorization", json.string("Bot " + key))
	])))
	let r = request.request("GET","https://discord.com/api/gateway/bot", header, none)!
	
	if r.code ~= 200 {
		return false
	}

	if let object(map) = r.return {
		if let string(url) = map["url"] | json.array([json.string("")]) {
			// https://discord.com/developers/docs/topics/gateway#identifying
			let identification = json.object(mapFrom([
									("op", json.number(2.0)),
									("d", json.object(mapFrom([
										("token", json.string(key)),
										("intents", json.number(512.0)),
										("properties", json.object(mapFrom([
											("$os", json.string("windows")),
											("$browser", json.string("none")),
											("$device", json.string("none"))
										]))),
										("presence", parseStatus(presence))
									])))
								]))
			let mut heartbeatInterval = 1000.0
			let lastSequenceNumber:maybe[float] = none
			let mut stopNow = false
			let websocket = websocket.connect({
				onOpen: (send: websocket.send) -> cmd[bool] {
					let senddata = send(json.stringify(identification))!
					times.sleep(1000)!
					send(json.stringify(json.object(mapFrom([
						("op", json.number(1.0)),
						("d", if let yes(lsn) = lastSequenceNumber { json.number(lsn) } else { json.null })
					]))))!
					while (true) {
						times.sleep(heartbeatInterval.floor())!
						send(json.stringify(json.object(mapFrom([
							("op", json.number(1.0)),
							("d", if let yes(lsn) = lastSequenceNumber { json.number(lsn) } else { json.null })
						]))))!
					}
					return true
				},
				onMessage: (send: websocket.send, message: str) -> cmd[bool] {
					let mut stop = false
					if let yes(parsedMessage) = json.parseSafe(message) {
						if let object(messageData) = parsedMessage {
							if let yes(number(opCode)) = messageData["op"] {
								if opCode == 10.0 {
									if let yes(object(dataSent)) = messageData["d"] {
										if let yes(number(heartbeatTiming)) = dataSent["heartbeat_interval"] {
											heartbeatInterval = heartbeatTiming
										}
									}
								} // 10 is hello
								else if opCode == 0.0 {
									if let yes(string(messageType)) = messageData["t"] {
										if messageType == "READY" {
											if let yes(object(data)) = messageData["d"] {
												if let yes(object(userData)) = messageData["user"] {
													if let yes(runFunc) = responses.onReady {
														runFunc(parseUserData(userData))!
													}
												}
											}
										}
										if messageType == "MESSAGE_CREATE" {
											if let yes(object(data)) = messageData["d"] {
												if let yes(runFunc) = responses.onMessage {
														stop = runFunc(parseMessageData(data))!
													}
											}
										}
									}
								} // 0 is dispatch
								else if opCode == 11.0 {} // 11 is heatbeat acknowledgement
								else if opCode == 7.0 {
									send(json.stringify(json.object(mapFrom([
										("op", json.number(7.0)),
										("d", json.null),
									]))))!
								} // 7 is reconnect requests
								else {
									print(parsedMessage)
								}
							}
						}
					}
					stopNow = if (stop) { true } else { stopNow }
					return stop
				},
			}, url + "/?v=9&encoding=json")!

			print(websocket)

			return true
		} else {
			return false
		}
	}
	
	return false
}
