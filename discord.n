import request
import json
import websocket

let pub color = imp color
let pub role = imp role
let pub member = imp member
let pub emote = imp emote
let pub guild = imp guild
let pub channel = imp channel
let pub message = imp message
let pub reaction = imp reaction

// important variables
let key:str = ""

let header: map[str, str] = mapFrom([
	("Content-Type", "application/json"),
	("Authorization", "Bot " + key)
])

// custom types

type status = online
			| away
			| offline


// internal functions
let jsonToStrMap = [jsonVal: json.value] -> maybe[map[str, str]] {
	if let <object map> = jsonVal {
		return entries(map)
			|> filterMap(([(key, value): (str, json.value)] -> maybe[(str, str)] {
				if let <string str> = value {
					return yes((key, str))
				} else {
					return none
				}
			}))
			|> mapFrom()
			|> yes()
	} else {
		return none
	}
}

let parseUserData = [data:map[str, str]] -> member.Member{
	return member.Member(
		data
			|> getValue("id")
			|> default(""),
		data
			|> getValue("username")
			|> default(""),
		data
			|> getValue("avatar")
			|> default(""),
		(data
			|> getValue("bot")
			|> default("True")) == "True"
	)
}

let parseMessageData = [data:json.value] -> maybe[message.Message] {

	if let <object map> = data {

		return yes(message.Message(
			if let <yes <string ch>> = getValue("channel_id", map) {yes(ch)} else {none},
			if let <object map> = data {
				if let <yes <string str>> = getValue("id", map) {
					str
				} else {
					""
				}
			} else {
				""
			},

			if let <object map> = data {
				if let <yes <string str>> = getValue("content", map) {
					str
				} else {
					""
				}
			} else {
				""
			},
			if let <object val> = default(json.object(mapFrom([("", json.string(""))])), getValue("author", map)) {
				if let <yes retained> = jsonToStrMap(json.object(val)) {
					parseUserData(retained)
										 |> yes()
				} else {
					none
				}
			} else {
				none
			}

		))
	} else {
		return none
	}
}

// public functions
let pub start = [k:str] -> cmd[bool] {
	var key = k
	var header = mapFrom([
		("Content-Type", "application/json"),
		("Authorization", "Bot " + key)
	])
	let r = request.get("https://discord.com/api/gateway/bot", header)!
	if r.code /= 200{
		return false
	}

	if let <object map> = r.return {
		if let <string url> = default(json.array([json.string("")]), getValue("url", map)) {
			// https://discord.com/developers/docs/topics/gateway#identifying
			let identification = json.object(mapFrom([
									("op", json.number(2.0)),
									("d", json.object(mapFrom([
										("token", json.string(key)),
										("properties", json.object(mapFrom([
											("$os", json.string("windows")),
											("$browser", json.string("none")),
											("$device", json.string("none"))
										]))),
										("presence", json.object(mapFrom([
											("since", json.null),
											("activities", json.null),
											("status", json.string("online")),
											("afk", json.boolean(false))
										]))),
										("intents", json.number(7.0))
									])))
								]))
			let websocket = websocket.connect({
				onOpen: [send: websocket.send] -> cmd[bool] {
					return false
				}
				onMessage: [send: websocket.send message: str] -> cmd[bool] {
					if let <yes parsedMessage> = json.parseSafe(message) {
						if let <object messageData> = parsedMessage {
							if let <yes <number opCode>> = getValue("op", messageData) {
								print(parsedMessage)
								if opCode == 10.0 {
									print("Hello recived")
									print(send(json.stringify(identification))!)
								}
							}
						} else {
							print(parsedMessage)
						}
					} else {
						print(message)
					}
					return false
				}
			}, url)!
		} else {
			return false
		}
	} else {
		return false
	}

	return true
}

let pub getKey = [] -> str{
	return key
}

// Getting users
let pub getSelf = [] -> cmd[maybe[member.Member]] {
	// Sends a request to the url
	let r = request.get("https://discord.com/api/users/@me", header)!
	if r.code /= 200{
		return none
	}

	if let <yes map> = jsonToStrMap(r.return) {
		return parseUserData(map)
							   |> yes()
	} else {
		return none
	}
}

let pub getUser = [id:str] -> cmd[maybe[member.Member]] {
	// Uses the id to get the url to send the request to
	let url:str = "https://discord.com/api/users/" + id
	let r = request.get(url, header)!
	if r.code /= 200{
		return none
	}

	if let <yes map> = jsonToStrMap(r.return) {
		return parseUserData(map)
							   |> yes()
	} else {
		return none
	}
}

// Getting Messages
let pub getMessages = [c:str] -> cmd[maybe[list[message.Message]]] {
	let url:str = "https://discord.com/api/channels/" + c + "/messages"
	let r = request.get(url, header)!

	if r.code /= 200{
		return none
	}

	if let <array list> = r.return{
		return list
				 |> filterMap(([thing: json.value] -> maybe[message.Message] {
				 	return thing
				 		 	  |> parseMessageData()
				 }))
				 |> yes()
	} else {
		return none
	}
}

let pub getMessage = [c:str m:str] -> cmd[maybe[message.Message]] {
	let url:str = "https://discord.com/api/channels/" + c + "/messages/" + m
	let r = request.get(url, header)!

	if r.code /= 200{
		return none
	}

	return parseMessageData(r.return)
}


// Sending messages/reactions
let pub sendMessage = [c:str m:str] -> cmd[int] {
	let url:str = "https://discord.com/api/channels/" + c + "/messages"
	let r = request.post(url, mapFrom([("content", m)]), header)!
	print(r)
	return r.code
}
